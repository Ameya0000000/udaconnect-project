### Architecture Decision

## Plan

For message passing strategies, we are considering three different techniques:

1. RESTful APIs: Currently employed in the starter project, offering simplicity and statelessness, ideal for CRUD operations on well-defined entities.

2. Kafka: A robust distributed event streaming platform designed for high volume real-time data feeds. Suitable for ingesting large volumes of location data.

3. gRPC: A high-performance, open-source framework with efficient features for inter-service communication, ideal for collecting high volume data and making concurrent requests.

## Description of Architecture & Message Passing Techniques Interconnection

1. Person Microservice: Manages operations related to Person entities. It employs RESTful API endpoints for CRUD operations, offering a straightforward method for maintaining and querying person records.

2. Location Microservice (Data Ingestion): This service is the first point of contact for ingesting new location data. It employs gRPC to efficiently collect high volume location data from users. After data collection, it acts as a Kafka producer, pushing each piece of location data to a Kafka topic.

3. Location Microservice (Data Storage): Acts as a Kafka consumer, subscribing to the Kafka topic where the location data is published. Upon data consumption, it stores this data in the database, ensuring durability and availability for other services.

4. Connection Microservice: Finds connections between people based on their locations. It fetches new location data by subscribing to the Kafka topic and fetches Person data via the RESTful API provided by the Person Microservice.

## Justification

1. RESTful APIs: Retained for the Person service due to its simplicity, ubiquity, and compatibility with HTTP. Since the Person service experiences moderate traffic and straightforward transactions, REST is both efficient and adequate.

2. Kafka: Employed for the flow of location data due to its ability to handle real-time, high-volume data streams. By splitting the Location service into data ingestion and data storage components, we optimize the ingestion process and ensure that no data is lost, even during peak loads.

3. gRPC: Integrated into the initial Location service (Data Ingestion) for its efficiency and performance advantages over traditional HTTP/1.1. Given the potential volume of location data, gRPC's support for HTTP/2 enables efficient and concurrent data collection.

Cost and Scalability Considerations: Given the impending launch in two weeks with a limited budget, this architecture is tailored as an MVP, focusing only on necessary features. By containerizing services, we ensure easy deployment and scalability. Kafka's integration specifically addresses the need to handle a large volume of location data, making this design both cost-effective and scalable.
