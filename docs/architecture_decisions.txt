### Architecture Decision

## Plan

To fulfill the UdaConnect business requirements, we've assessed three primary communication techniques:
1. RESTful APIs: Simple and stateless, ideal for CRUD operations on clearly-defined entities.
2. Kafka: A scalable event streaming platform, perfect for ingesting real-time, high-volume data feeds.
3. gRPC: A high-performance framework, optimized for high-volume data collection and concurrent requests.

## Architecture Description & Interconnection of Message Passing Techniques

1. Person Microservice: Manages the operations related to Person entities.
- Communication: Uses RESTful API endpoints for CRUD operations. This ensures simplicity in handling and querying person records.
2. Location Microservice (Data Ingestion): This service ingests new location data.
- Communication: The service uses gRPC for high-performance data collection, making it highly efficient for ingesting large volumes of location data from users. Once the data is collected, this microservice acts as a Kafka producer, sending each piece of location data to a dedicated Kafka topic.
3.Location Microservice (Data Storage): Processes and stores the ingested location data.
- Communication: This service acts as a Kafka consumer, fetching location data from the Kafka topic and then storing this data in the appropriate database.
4. Connection Microservice: Identifies connections between people based on their locations.
- Communication: Fetches location data by subscribing to the Kafka topic, and retrieves Person data through the RESTful API endpoints provided by the Person Microservice.

## Justification

1. RESTful APIs: Adopted for the Person service due to simplicity, wide acceptance, and compatibility with HTTP. The traffic and operations of the Person service are moderate, making REST an efficient choice.
2. Kafka: Chosen for location data processing because of its prowess in managing real-time, high-volume data streams. By dividing the Location service into data ingestion and storage parts, the ingestion process becomes more efficient, ensuring no data is lost even during high demands.
3. gRPC: Incorporated for the Location Microservice (Data Ingestion) specifically to offer performance benefits over the conventional HTTP/1.1. With the potential high traffic of location data, gRPC's support for HTTP/2 ensures efficient, concurrent data collection, clearly pinpointing its use in our architecture.

## Cost and Scalability Considerations: Keeping in mind the two-week launch timeframe and a limited budget, this architecture is fine-tuned as an MVP, focusing solely on core features. Containerizing these services guarantees streamlined deployment and scalability. By integrating Kafka, we directly address the challenge of handling vast amounts of location data, making this design both cost-efficient and scalable.
